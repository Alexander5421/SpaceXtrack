
// function clearContent() {
//   const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
//   const startRow = 2;
//   const numberOfColumns = 3; // ID, 名称, NET
//   if (sheet.getLastRow() == 0 || sheet.getLastRow() == 1) {
//     return;
//   }
//   sheet.getRange(startRow, 1, sheet.getLastRow(), numberOfColumns).clearContent();
// }

// function deleteRowsWithKeywords() {
//   const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
//   const range = sheet.getDataRange(); // 获取Sheet中的所有数据
//   const values = range.getValues(); // 读取所有数据到一个二维数组

//   // 定义要搜索的关键词，可以添加更多
//   const keywords = ["Starship", "其他关键词"];

//   // 从底部向上遍历，这样删除行时不会影响尚未检查的行的索引
//   for (let i = values.length - 1; i >= 0; i--) {
//     // 假设关键词在每行的第二列，即数组的索引1
//     const rowContent = values[i][1]; // 获取当前行第二列的值
//     let containsKeyword = false;

//     // 检查当前行是否包含任一关键词
//     keywords.forEach(keyword => {
//       if (rowContent.includes(keyword)) {
//         containsKeyword = true;
//         console.log(rowContent);
//       }
//     });

//     // 如果包含关键词，则删除行
//     if (containsKeyword) {
//       sheet.deleteRow(i + 1); // 删除行，因为Sheet的行索引从1开始，而数组索引从0开始，所以这里要+1
//     }
//   }
// }
function testActive() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  console.log(sheet.getSheetName());
}

function testUser() {
  console.log(Session.getActiveUser().getEmail())
}

function MonthLaunchCount(){
    const sheet = SpreadsheetApp.openById("1mXaJ40SvLBtVkxXvl7pbHRWhjPC8ZOleaqJ9fR8xH7g").getSheetByName("SpaceX");
    // the data contain launch id launch name and launch date
    // launch data example 2023-03-09T19:13:28Z
    // aggregate the data by month and year and count the launch number 
    // then write the result to another sheet called chart
    const range = sheet.getDataRange();
    const values = range.getValues();
    function generateYearMonth(start, end) {
      const result = [];
      const startDate = new Date(start);
      const endDate = new Date(end);
    
      for (let d = startDate; d <= endDate; d.setMonth(d.getMonth() + 1)) {
        const year = d.getFullYear();
        const month = d.getMonth() + 1;
        result.push(`${year}-${month}`);
      }
    
      return result;
    }
    
    const launchCount = {};
    let minDate = new Date();
    let maxDate = new Date(0);
    
    values.forEach(row => {
      const date = new Date(row[2]);
      minDate = new Date(Math.min(minDate, date));
      maxDate = new Date(Math.max(maxDate, date));
      const year = date.getFullYear();
      const month = date.getMonth() + 1;
      const key = `${year}-${month}`;
      if (launchCount[key]) {
        launchCount[key]++;
      } else {
        launchCount[key] = 1;
      }
    });
    
    const chartSheet = SpreadsheetApp.openById("1mXaJ40SvLBtVkxXvl7pbHRWhjPC8ZOleaqJ9fR8xH7g").getSheetByName("Test");
    chartSheet.clear();
    chartSheet.appendRow(["Year-Month", "Launch Count"]);
    
    // Generate all year-month combinations and sort them
    const yearMonths = generateYearMonth(minDate, maxDate).sort((a, b) => {
      const [yearA, monthA] = a.split('-').map(Number);
      const [yearB, monthB] = b.split('-').map(Number);
    
      if (yearA !== yearB) {
        return yearA - yearB;
      } else {
        return monthA - monthB;
      }
    });
    
    for (const yearMonth of yearMonths) {
      const count = launchCount[yearMonth] || 0;
      chartSheet.appendRow([yearMonth, count]);
    }
    
    console.log(minDate);
    console.log(maxDate);
    console.log(yearMonths);
    


  }
// function MonthLaunchCountUpdateTester(){
//   MonthLaunchCountUpdate(2);
// }
function MonthLaunchCountUpdate(newLaunchCount) {
  // we can assume every month has at least one launch
  // for each new launch update the corresponding month launch count
  // if the month is not in the chart sheet add it to the end of the sheet
  // if the month is in the chart sheet update the launch count
  // the chart sheet is generated by the MonthLaunchCount function
  

  // open the spacex sheet and get the last newLaunchCount rows
  const sheet = SpreadsheetApp.openById("1mXaJ40SvLBtVkxXvl7pbHRWhjPC8ZOleaqJ9fR8xH7g").getSheetByName("SpaceX");
  const range = sheet.getRange(sheet.getLastRow() - newLaunchCount+1, 1, newLaunchCount, 3);
  const values = range.getValues();
  // open the test sheet
  const chartSheet = SpreadsheetApp.openById("1mXaJ40SvLBtVkxXvl7pbHRWhjPC8ZOleaqJ9fR8xH7g").getSheetByName("Test");
  const chartRange = chartSheet.getDataRange();
  const chartValues = chartRange.getValues();

  // for each new launch update the corresponding month launch count
  // last month in the chart sheet
  lastMonth = chartValues[chartValues.length - 1][0];
  // now it's 	Mon Jan 01 2024 00:00:00 GMT-0600 (Central Standard Time)
  // change last month to year-month format
  lastMonth = `${lastMonth.getFullYear()}-${lastMonth.getMonth() + 1}`

  var lastMonthLaunchCount = chartValues[chartValues.length - 1][1];
  var newMonth = false;
  var newMonthLaunchCount = 0;
  for (let i = 0; i < values.length; i++) {
    const date = new Date(values[i][2]);
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const key = `${year}-${month}`;
    if (key === lastMonth) {
      lastMonthLaunchCount++;
    } else {
      if(!newMonth){
        newMonth = true;
        let lastRow = chartSheet.getLastRow();
        chartSheet.appendRow([key, 1]);
        let newRow = chartSheet.getLastRow();
        let newFormula = `SUM(\$B\$2:B${newRow})`;
        chartSheet.getRange(newRow, 3).setFormula(newFormula);
        
    }
      newMonthLaunchCount++;
    }
  }
  // update the last month launch count and new month launch count to the chart sheet
  chartSheet.getRange(chartValues.length, 2).setValue(lastMonthLaunchCount);
  if(newMonth){
    chartSheet.getRange(chartValues.length + 1, 2).setValue(newMonthLaunchCount);
  }
}
function createtimevslaunchCountChart() {
  // I want to create a cumulative chart to show the launch count over time
  // use the data created by MonthLaunchCount function
  // it should be a line chart with x-axis as time and y-axis as launch count so far
  // the chart should be created in the same sheet as the data
  const sheet = SpreadsheetApp.openById("1mXaJ40SvLBtVkxXvl7pbHRWhjPC8ZOleaqJ9fR8xH7g").getSheetByName("Test");
  const range = sheet.getDataRange();
  const values = range.getValues();
  const chartSheet = SpreadsheetApp.openById("1mXaJ40SvLBtVkxXvl7pbHRWhjPC8ZOleaqJ9fR8xH7g").getSheetByName("Test");
  const chart = chartSheet.newChart()
    .setChartType(Charts.ChartType.LINE)
    .addRange(sheet.getRange("A1:B" + values.length))
    .setPosition(1, 4, 0, 0)
    .build();
   // Insert the chart as an image in the sheet
  sheet.insertChart(chart);
  console.log("chart created");
}
